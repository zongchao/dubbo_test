<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd">

    <!-- 配置activeMQ的链接工厂 failover为熔断模式-->
    <bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61616)?timeout=2000"/>
    </bean>

    <!-- 池话链接工厂-->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="activeMQConnectionFactory"/>
        <property name="maxConnections" value="10"/>
    </bean>

    <!-- 配置实际链接工厂-->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>

    <bean id="messageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter"/>

    <!--这个是队列目的地，点对点的-->
    <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>queue</value>
        </constructor-arg>
    </bean>

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestination" ref="destination"/>
        <property name="messageConverter">
            <bean class="org.springframework.jms.support.converter.SimpleMessageConverter"/>
        </property>
        <property name="pubSubDomain" value="false"/>
    </bean>


    <!--消息监听容器-->
    <!-- sessionTransacted 开启事务，当消费发生异常时重新入队-->
    <!--concurrency 设置开启消费者的线程数-->
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory"
                            acknowledge="transacted" message-converter="messageConverter"
                            concurrency="4-8">
        <jms:listener destination="queue" ref="consumerMessageListener"/>
    </jms:listener-container>

    <!--消息监听器-->
    <bean id="consumerMessageListener" class="com.neko.dubbo.queue.core.MessageLinstener"/>
    <!--&lt;!&ndash;消息监听容器&ndash;&gt;-->
    <!--&lt;!&ndash; sessionTransacted 开启事务，当消费发生异常时重新入队&ndash;&gt;-->
    <!--<bean id="jmsContainer"-->
    <!--class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
    <!--<property name="connectionFactory" ref="connectionFactory"/>-->
    <!--<property name="destination" ref="destination"/>-->
    <!--<property name="messageListener" ref="consumerMessageListener"/>-->
    <!--<property name="sessionTransacted" value="true"/>-->
    <!--<property name="concurrency" value="4-8"/>-->
    <!--</bean>-->
</beans>